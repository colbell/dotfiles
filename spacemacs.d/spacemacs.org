#+TITLE: Spacemacs tangled user configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Introduction
  This is a tangled user-init and user-config file for spacemacs.
  following code in your =~/.spacemacs.d/init.el= file.

** init.el

#+BEGIN_SRC emacs-lisp :tangle no

  (defun dotspacemacs/user-init ()
    ;; tangle without actually loading org
    (let ((src (concat dotspacemacs-directory "spacemacs.org"))
          (ui (concat dotspacemacs-directory "user-init.el"))
          (uc (concat dotspacemacs-directory "user-config.el")))
      (when (or (file-newer-than-file-p src ui) (file-newer-than-file-p src uc))
        (call-process
         (concat invocation-directory invocation-name)
         nil nil t
         "-q" "--batch" "--eval" "(require 'ob-tangle)"
         "--eval" (format "(org-babel-tangle-file \"%s\")" src)))
      (load-file ui)))

  (defun dotspacemacs/user-config ()
    (load-file (concat dotspacemacs-directory "user-config.el")))

#+END_SRC

* Editing warning

Place a warning in the generated .el files.

#+BEGIN_SRC emacs-lisp :tangle user-init.el
  ;;; -----------------------------------------------
  ;;; Do not edit this file, as it has been generated
  ;;; from an Orgmode file. If you do all changes will
  ;;; be lost when it is next generated on Emacs restart.
  ;;;
  ;;; Source: ~/.spacemacs.d/spacemacs.org
  ;;; -----------------------------------------------
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ;;; -----------------------------------------------
  ;;; Do not edit this file, as it has been generated
  ;;; from an Orgmode file. If you do all changes will
  ;;; be lost when it is next generated on Emacs restart.
  ;;;
  ;;; Source: ~/.spacemacs.d/spacemacs.org
  ;;; -----------------------------------------------
#+END_SRC

* Me, Myself I
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq user-mail-address "col@baibell.org")
  (setq user-full-name "Colin Bell")
#+END_SRC

* Themes
  These have to be set prior to the theme been loaded.

#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq solarized-distinct-fringe-background nil)
  (setq solarized-scale-org-headlines nil)
  (setq solarized-use-variable-pitch nil)
  (setq solarized-high-contrast-mode-line nil)
#+END_SRC

* Basic setup.
  Allow paste into xterm etc.
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq select-enable-primary t)
#+END_SRC

Show fill column indicator at pos 120.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(setq fill-column 120)
(add-hook 'prog-mode-hook #'fci-mode)      ;; Indicate fill column.
#+END_SRC

Remove unnecessary clutter
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (with-eval-after-load 'spaceline-segments
     (spaceline-toggle-minor-modes))
  (setq-default display-line-numbers-width nil)
#+END_SRC

Modeline.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
  (setq doom-modeline-icon t)
#+END_SRC

Fix Problems with scaling powerline in modeline.
  See https://github.com/syl20bnr/spacemacs/issues/8131.

#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (spacemacs/set-default-font dotspacemacs-default-font)
#+END_SRC

* ???

#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq exec-path-from-shell-check-startup-files nil)
#+END_SRC

* Keep Emacs maintained configuration separate
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq custom-file (expand-file-name "custom.el" dotspacemacs-directory))
  (load custom-file)
#+END_SRC

* Languages
** Ruby

Configure Linting.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package rubocop
    :ensure t
    :defer t
    :commands rubocop-mode
    :diminish rubocop-mode)
#+END_SRC

Alignment rules.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq ruby-align-chained-calls t)
#+END_SRC

** Elixir
   Fixes problems with code reloading not working in Elixir/Phoenix. See http://spacemacs.org/doc/FAQ.html#orgheadline18

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq create-lockfiles nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq alchemist-test-status-modeline t)
  (setq alchemist-test-display-compilation-output t)
  ;; (setq alchemist-mix-test-default-options "--trace")
  (setq flycheck-elixir-credo-strict t)
#+END_SRC

** Elm
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package elm-mode
    :defer t
    :config
    (setq elm-format-on-save t)
    (setq elm-tags-on-save t)
    (setq elm-sort-imports-on-save t))
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun cnb/web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  (add-hook 'web-mode-hook 'cnb/web-mode-hook t)

  (setq emmet-indentation 2)
#+END_SRC

** Config files
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'conf-mode-hook #'linum-mode)
#+END_SRC

* Utilities
** Dired

Configure dired listing.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq dired-listing-switches "-alhG --group-directories-first")
#+END_SRC

Extra font-lock rules for dired.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (diredfl-global-mode)
#+END_SRC


Allow editing of permissions in wdired.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq wdired-allow-to-change-permissions t)
#+END_SRC


** Recent Files Mode
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (with-eval-after-load 'recentf
       ;; Files to ignore in recent files.
       (add-to-list 'recentf-exclude "~$")
       (add-to-list 'recentf-exclude "tmp")
       (add-to-list 'recentf-exclude "/ssh:")
       (add-to-list 'recentf-exclude "/sudo:")
       (add-to-list 'recentf-exclude "TAGS")
       (add-to-list 'recentf-exclude "/\\.git/.*\\'")
       (add-to-list 'recentf-exclude recentf-save-file)

       ;; TODO: Check if this is still the case
       ;; Because .emacs.d is a symlink to dotfiles/emacs.d a file can have two
       ;; names so we also need to ignore the one in dotfiles.
       (add-to-list 'recentf-exclude (file-truename "~/dotfiles/emacs.d/elpa"))
       (add-to-list 'recentf-exclude
                    (file-truename "~/dotfiles/emacs.d/.cache/")))

   #+END_SRC

** Ivy/Swiper
  #+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun cnb/swiper-recenter (&rest args)
    "recenter display after swiper"
    (recenter))

  (advice-add 'swiper :after #'cnb/swiper-recenter)
  #+END_SRC

* Programming Utilities
** Projectile
   Cache project files for performance.
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq projectile-enable-caching t)
   #+END_SRC

   Spacemacs doesn't have a default key for showing a buffer list of just the current projects buffers.
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (spacemacs/set-leader-keys "oi" 'projectile-ibuffer)
   #+END_SRC
** Rainbow Mode
Colourize colour names in programming modes.
  #+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq rainbow-html-colors t)
  (setq rainbow-x-colors t)
  (add-hook 'prog-mode-hook #'rainbow-mode)
  #+END_SRC

** Source Control

Show Magit status in a large window.
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (setq-default git-magit-status-fullscreen t)
#+END_SRC

Show projects TODOs in Magit status buffer.
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  (with-eval-after-load 'magit-mode
    (magit-todos-mode))
#+END_SRC

** EditorConfig
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package editorconfig
    :defer t
    :init (add-to-list 'auto-mode-alist '("\\.editorconfig" . conf-unix-mode)))
#+END_SRC

* CLEANUP


#+BEGIN_SRC emacs-lisp :tangle user-config.el


  ;;==============================================
  ;; Evil Goggles.
  ;;==============================================
  (setq evil-goggles-pulse 'display-graphic-p)
  (setq evil-goggles-async-duration nil)
  (setq evil-goggles-blocking-duration nil)



  ;;==============================================
  ;; WINUM configuration
  ;;==============================================
  (setq winum-scope (quote frame-local))

  ;;==============================================
  ;; IBUFFER configuration
  ;;==============================================
  (setq ibuffer-show-empty-filter-groups nil)


  ;;==============================================
  ;; Web mode configuration
  ;;==============================================

  ;;==============================================
  ;; SCSS Mode
  ;;==============================================
  (defun cnb/scss-mode-hook ()
    "Hooks for SCSS mode."
    (setq css-indent-offset 2))

  (add-hook 'scss-mode-hook 'cnb/scss-mode-hook t)


  ;;==============================================
  ;; ORG configuration
  ;;==============================================

  (with-eval-after-load 'org
    (require 'ob-tangle)
    (setq org-directory "~/Dropbox/org/")
    (setq org-agenda-files
          (list (concat org-directory "personal.org")
                (concat org-directory "kwela.org")
                (concat org-directory "notes.org")))
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "STARTED(n)" "|" "DONE(d!/!)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE"))))

    ;; Allow refiling to any agenda file.
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))

    (setq org-capture-templates
          '(("t" "todo" entry (file+headline (concat org-directory "personal.org") "Tasks")
             "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))

    ;; Allow refile to create parent tasks with confirmation
    ;;(setq org-refile-allow-creating-parent-nodes (quote confirm))
    )



  ;;===============================================
  ;; Show current function.
  ;;===============================================
  (which-function-mode)
  ;; (set-face-attribute 'which-func nil
  ;;                     :foreground (face-foreground 'font-lock-function-name-face))

  ;; (setq-default header-line-format
  ;;               '((which-func-mode ("" which-func-format " "))))

  ;;===============================================
  ;; Email client
  ;;===============================================
  ;; (with-eval-after-load 'mu4e
  ;;   (require 'mu4e-contrib)
  ;;   (setq mu4e-html2text-command 'mu4e-shr2text)
  ;;   ;; (setq mu4e-html2text-command "html2text -utf8 -width 72")
  ;;   ;; (setq mu4e-html2text-command "w3m -dump -T text/html")

  ;;   (setq mu4e-user-mail-address-regexp "col@baibell\.org\\|colin@kwelasolutions.com")

  ;;   (setq mu4e-maildir "~/mbsync")
  ;;   (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  ;;   (setq mu4e-sent-folder "/[Gmail]/Sent Mail")
  ;;   (setq mu4e-trash-folder  "/[Gmail]/Trash")

  ;;   ;; Needed for Gmail/mbsync
  ;;   (setq mu4e-change-filenames-when-moving t)

  ;;   (setq mail-user-agent 'mu4e-user-agent)

  ;;   (setq mu4e-use-fancy-chars t)
  ;;   ;; (setq mu4e-headers-new-mark '("N" . "❗"))
  ;;   ;; (setq mu4e-headers-passed-mark '("P" . "⇉"))
  ;;   ;; (setq mu4e-headers-replied-mark '("R" . "↵"))
  ;;   ;; (setq mu4e-headers-seen-mark '("S" . "✉"))
  ;;   ;; (setq mu4e-headers-unread-mark '("u" . "📨")
  ;;   (setq mu4e-view-prefer-html nil)
  ;;   (setq mu4e-headers-skip-duplicates t)
  ;;   (setq mu4e-view-fields
  ;;         '(:from :to :cc :subject :flags :date :maildir :mailing-list :tags
  ;;                 :attachments :signature :decryption :user-agent))
  ;;   (setq mu4e-headers-fields
  ;;         '(
  ;;           (:human-date   . 20)
  ;;           (:flags        .  8)
  ;;           (:size         .  8)
  ;;           (:from-or-to   . 22)
  ;;           (:maildir      . 22)
  ;;           (:subject      . nil)))

  ;;   ;; Set format=flowed
  ;;   ;; mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
  ;;   ;; each paragraph is a single long line; at sending, emacs will add the
  ;;   ;; special line continuation characters.
  ;;   (setq mu4e-compose-format-flowed t)

  ;;   (setq mu4e-headers-leave-behavior 'apply)
  ;;   (setq message-kill-buffer-on-exit t)

  ;;   (setq mu4e-headers-date-format "%d%b%y %H:%M" )

  ;;   ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  ;;   (setq mu4e-sent-messages-behavior 'delete)

  ;;   (setq mu4e-auto-retrieve-keys t)

  ;;   ;; Hide annoying messsages.
  ;;   (setq mu4e-hide-index-messages t)

  ;;   (setq mu4e-confirm-quit t)

  ;;   (setq mu4e-msg2pdf "/usr/bin/msg2pdf")
  ;;   (setq mu4e-attachment-dir  "~/Downloads")

  ;;   (setq mu4e-view-show-images t)

  ;;   (when (fboundp 'imagemagick-register-types)
  ;;     (imagemagick-register-types))

  ;;   (setq mu4e-view-show-addresses t)

  ;;   (setq mu4e-get-mail-command "mbsync -a")

  ;;   (setq smtpmail-default-smtp-server "smtp.gmail.com")
  ;;   (setq smtpmail-smtp-server "smtp.gmail.com")
  ;;   (setq smtpmail-smtp-service 587))

  ;;===============================================
  ;; Work around for https://github.com/syl20bnr/spacemacs/issues/10410
  ;;===============================================
  (defun kill-minibuffer ()
    (interactive)
    (when (windowp (active-minibuffer-window))
      (evil-ex-search-exit)))
  (add-hook 'mouse-leave-buffer-hook #'kill-minibuffer)

  ;;===============================================
  ;; If saving a script file ensure that it is executable
  ;;===============================================
  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p)

  ;;===============================================
  ;; Save contents of scratch buffer on exit and restore on startup.
  ;;===============================================
  (use-package persistent-scratch
    :config
    (setq persistent-scratch-save-file
          (concat(file-name-as-directory spacemacs-cache-directory)
                 "persistent-scratch"))
    (persistent-scratch-setup-default))

  ;; (setq imenu-list-auto-resize nil)

  ;; Let me right-click in terminal to show terminal menu.
  (xterm-mouse-mode -1)

  (setq-default
   sentence-end-double-space t

   ;; Use a visible bell instead of a beep.
   visible-bell t

   ;; Always start a new tags list.
   tags-add-tables nil

   ;; When opening files follow all symbolic links.
   find-file-visit-truename t

   ;; I've got some TAGS files that are nearly 20MB in size.
   large-file-warning-threshold 20000000

   imenu-auto-rescan t


   ;;browse-url-browser-function 'browse-url-firefox
   browse-url-browser-function 'browse-url-generic
   browse-url-generic-program "chromium-browser"

   ;; C-l first position to top.
   recenter-positions '(top middle bottom))

  (setq kill-ring-max 500)

  (setq evil-want-fine-undo "Yes")

  ;; (global-set-key (kbd "TAB") #'company-indent-or-complete-common)

  ;; Next/Prev bookmark.
  (global-set-key (kbd "M-n") #'bm-next)
  (global-set-key (kbd "M-p") #'bm-previous)

  ;; My common mistakes.
  (define-abbrev-table
    'global-abbrev-table '(("teh" "the" nil 0)
                           ("tehy" "they" nil 0)
                           ("yuo" "you" nil 0)
                           ("yuor" "your" nil 0)))
  (setq-default abbrev-mode t)

  ;; Seems to be needed for evil to work with system clipboard
  (fset 'evil-visual-update-x-selection 'ignore)

  (mouse-avoidance-mode 'exile)

#+END_SRC
